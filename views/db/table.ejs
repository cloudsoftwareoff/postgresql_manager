<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table: {{tableName}} - PostgreSQL Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f4ff',
                            100: '#e0e9ff',
                            500: '#667eea',
                            600: '#5a67d8',
                            700: '#4c51bf',
                            900: '#2d3748'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in',
                        'slide-in': 'slideIn 0.3s ease-out',
                        'pulse-glow': 'pulseGlow 2s infinite'
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        .editable-cell {
            cursor: pointer;
            transition: all 0.2s;
        }
        .editable-cell:hover {
            background-color: #f3f4f6;
        }
        .editing {
            background-color: #fef3c7 !important;
            border: 2px solid #f59e0b;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-lg border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex items-center justify-between flex-wrap gap-4">
                <div class="flex items-center space-x-4">
                    <a href="/api/db" class="flex items-center space-x-2 px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                        <i class="fas fa-arrow-left"></i>
                        <span>Back to Dashboard</span>
                    </a>
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-purple-600 rounded-xl">
                            <i class="fas fa-table text-white text-xl"></i>
                        </div>
                        <div>
                            <h1 id="tableTitle" class="text-3xl font-bold text-gray-900">Loading...</h1>
                            <p id="tableSubtitle" class="text-gray-600">Table details</p>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-3 flex-wrap">
                    <button onclick="refreshData()" class="flex items-center space-x-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
                        <i class="fas fa-sync-alt"></i>
                        <span>Refresh</span>
                    </button>
                    <button onclick="showAddModal()" class="flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
                        <i class="fas fa-plus"></i>
                        <span>Add Row</span>
                    </button>
                    <button onclick="exportData()" class="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-download"></i>
                        <span>Export</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Error Message -->
        <div id="errorContainer" class="hidden mb-6">
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center space-x-3">
                <i class="fas fa-exclamation-triangle text-red-500"></i>
                <div>
                    <h3 class="text-red-800 font-semibold">Error</h3>
                    <p id="errorMessage" class="text-red-700"></p>
                </div>
            </div>
        </div>

        <!-- Table Container -->
        <div class="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
            <!-- Table Header -->
            <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-primary-500 to-purple-600">
                <div class="flex items-center justify-between flex-wrap gap-4">
                    <div class="flex items-center space-x-6">
                        <div class="flex items-center space-x-2 bg-white bg-opacity-20 rounded-lg px-3 py-1">
                            <i class="fas fa-database text-white"></i>
                            <span id="rowCount" class="text-white font-semibold">0 rows</span>
                        </div>
                        <div class="flex items-center space-x-2 bg-white bg-opacity-20 rounded-lg px-3 py-1">
                            <i class="fas fa-columns text-white"></i>
                            <span id="columnCount" class="text-white font-semibold">0 columns</span>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="relative">
                            <input type="text" id="searchInput" placeholder="Search in table..." 
                                   class="pl-10 pr-4 py-2 bg-white bg-opacity-90 border border-white border-opacity-30 rounded-lg text-gray-900 placeholder-gray-600 focus:outline-none focus:ring-2 focus:ring-white focus:bg-white">
                            <i class="fas fa-search absolute left-3 top-3 text-gray-600"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table Content -->
            <div class="p-6">
                <!-- Loading State -->
                <div id="loadingContainer" class="flex items-center justify-center py-12">
                    <div class="flex items-center space-x-3">
                        <i class="fas fa-spinner fa-spin text-primary-500 text-xl"></i>
                        <span class="text-gray-600">Loading table data...</span>
                    </div>
                </div>

                <!-- Table Data -->
                <div id="tableContainer" class="hidden">
                    <div class="overflow-x-auto">
                        <table id="dataTable" class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr id="tableHeader">
                                    <!-- Headers will be populated dynamically -->
                                </tr>
                            </thead>
                            <tbody id="tableBody" class="bg-white divide-y divide-gray-200">
                                <!-- Rows will be populated dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="hidden text-center py-12">
                    <i class="fas fa-inbox text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No Data Found</h3>
                    <p class="text-gray-500 mb-4">The table exists but contains no data.</p>
                    <button onclick="showAddModal()" class="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                        Add First Row
                    </button>
                </div>
            </div>

            <!-- Table Stats -->
            <div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
                <div class="flex flex-wrap gap-4 text-sm text-gray-600">
                    <div class="flex items-center space-x-2">
                        <i class="fas fa-info-circle"></i>
                        <span>Showing up to 100 rows for performance</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <i class="fas fa-clock"></i>
                        <span>Last updated: <span id="lastUpdated">Now</span></span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Add/Edit Modal -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-primary-500 to-purple-600">
                <h3 id="modalTitle" class="text-xl font-semibold text-white">Edit Row</h3>
            </div>
            <div class="p-6 overflow-y-auto max-h-[60vh]">
                <form id="editForm" class="space-y-4">
                    <div id="formFields">
                        <!-- Form fields will be populated dynamically -->
                    </div>
                </form>
            </div>
            <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                <button onclick="closeModal()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
                <button onclick="saveRow()" class="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                    <i class="fas fa-save mr-2"></i>Save
                </button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-xl font-semibold text-gray-900">Confirm Delete</h3>
            </div>
            <div class="p-6">
                <p class="text-gray-600">Are you sure you want to delete this row? This action cannot be undone.</p>
            </div>
            <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                <button onclick="closeDeleteModal()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
                <button onclick="confirmDelete()" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                    <i class="fas fa-trash mr-2"></i>Delete
                </button>
            </div>
        </div>
    </div>

    <!-- Notification Container -->
    <div id="notificationContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <script>
        // Global variables
        let tableName = '';
        let tableData = [];
        let columns = [];
        let columnInfo = [];
        let primaryKeys = [];
        let currentEditingRow = null;
        let deleteRowId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Get table name from URL
            const pathParts = window.location.pathname.split('/');
            tableName = decodeURIComponent(pathParts[pathParts.length - 1]);
            
            document.getElementById('tableTitle').textContent = tableName;
            document.title = `Table: ${tableName} - PostgreSQL Manager`;
            
            loadTableData();
            initializeSearch();
        });

        // Load table data
        async function loadTableData() {
            try {
                showLoading();
                
                // Load table schema
                const schemaResponse = await fetch(`/api/db/schema/${tableName}`);
                if (schemaResponse.ok) {
                    const schemaData = await schemaResponse.json();
                    columns = schemaData.columns.map(col => col.column_name);
                    columnInfo = schemaData.columns;
                    primaryKeys = schemaData.primaryKeys || [];
                }
                
                // Load table data
                const dataResponse = await fetch(`/api/db/data/${tableName}`);
                if (dataResponse.ok) {
                    const data = await dataResponse.json();
                    tableData = data.data || [];
                    renderTable();
                    updateStats();
                } else {
                    throw new Error('Failed to load table data');
                }
                
                hideError();
            } catch (error) {
                console.error('Error loading table data:', error);
                showError('Failed to load table data. Please check your connection.');
            } finally {
                hideLoading();
            }
        }

        // Render table
        function renderTable() {
            const tableContainer = document.getElementById('tableContainer');
            const emptyState = document.getElementById('emptyState');
            const tableHeader = document.getElementById('tableHeader');
            const tableBody = document.getElementById('tableBody');

            if (tableData.length === 0) {
                tableContainer.classList.add('hidden');
                emptyState.classList.remove('hidden');
                return;
            }

            tableContainer.classList.remove('hidden');
            emptyState.classList.add('hidden');

            // Render headers
            tableHeader.innerHTML = columns.map(col => {
                const isPrimaryKey = primaryKeys.includes(col);
                return `
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        <div class="flex items-center space-x-2">
                            ${isPrimaryKey ? '<i class="fas fa-key text-yellow-500"></i>' : ''}
                            <span>${col}</span>
                            <button onclick="sortTable('${col}')" class="text-gray-400 hover:text-gray-600">
                                <i class="fas fa-sort text-xs"></i>
                            </button>
                        </div>
                    </th>
                `;
            }).join('') + '<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>';

            // Render rows
            tableBody.innerHTML = tableData.map((row, index) => {
                const primaryKeyValue = primaryKeys.length > 0 ? row[primaryKeys[0]] : index;
                return `
                    <tr class="hover:bg-gray-50" data-row-id="${primaryKeyValue}">
                        ${columns.map(col => {
                            const value = row[col];
                            const displayValue = value === null ? 'NULL' : 
                                               typeof value === 'object' ? JSON.stringify(value) : String(value);
                            const cellClass = value === null ? 'text-gray-400 italic' : 'text-gray-900';
                            return `
                                <td class="px-6 py-4 whitespace-nowrap text-sm ${cellClass} editable-cell" 
                                    data-column="${col}" 
                                    onclick="editCell(this, '${col}', '${primaryKeyValue}')">
                                    <div class="max-w-xs truncate" title="${escapeHtml(displayValue)}">
                                        ${escapeHtml(displayValue)}
                                    </div>
                                </td>
                            `;
                        }).join('')}
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <div class="flex space-x-2">
                                <button onclick="editRow('${primaryKeyValue}')" 
                                        class="text-blue-600 hover:text-blue-900 transition-colors" 
                                        title="Edit Row">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="deleteRow('${primaryKeyValue}')" 
                                        class="text-red-600 hover:text-red-900 transition-colors" 
                                        title="Delete Row">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Update statistics
        function updateStats() {
            document.getElementById('rowCount').textContent = `${tableData.length} rows`;
            document.getElementById('columnCount').textContent = `${columns.length} columns`;
            document.getElementById('tableSubtitle').textContent = `${tableData.length} rows, ${columns.length} columns`;
            updateLastUpdated();
        }

        // Initialize search functionality
        function initializeSearch() {
            document.getElementById('searchInput').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const tbody = document.getElementById('tableBody');
                const rows = tbody.getElementsByTagName('tr');

                for (let i = 0; i < rows.length; i++) {
                    const row = rows[i];
                    const cells = row.getElementsByTagName('td');
                    let found = false;

                    for (let j = 0; j < cells.length - 1; j++) { // Exclude actions column
                        const cellText = cells[j].textContent.toLowerCase();
                        if (cellText.includes(searchTerm)) {
                            found = true;
                            break;
                        }
                    }

                    row.style.display = found ? '' : 'none';
                }
            });
        }

        // Edit cell inline
        function editCell(cell, column, rowId) {
            if (cell.classList.contains('editing')) return;

            const originalValue = cell.textContent.trim();
            const columnData = columnInfo.find(col => col.column_name === column);
            
            cell.classList.add('editing');
            
            let inputElement;
            if (columnData && columnData.data_type.includes('boolean')) {
                inputElement = document.createElement('select');
                inputElement.innerHTML = `
                    <option value="true" ${originalValue === 'true' ? 'selected' : ''}>true</option>
                    <option value="false" ${originalValue === 'false' ? 'selected' : ''}>false</option>
                    <option value="" ${originalValue === 'NULL' ? 'selected' : ''}>NULL</option>
                `;
            } else {
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.value = originalValue === 'NULL' ? '' : originalValue;
            }
            
            inputElement.className = 'w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary-500';
            
            cell.innerHTML = '';
            cell.appendChild(inputElement);
            inputElement.focus();
            inputElement.select();

            const saveEdit = async () => {
                const newValue = inputElement.value;
                try {
                    await updateCellValue(rowId, column, newValue);
                    // Update local data
                    const rowIndex = tableData.findIndex(row => 
                        primaryKeys.length > 0 ? row[primaryKeys[0]] == rowId : false
                    );
                    if (rowIndex !== -1) {
                        tableData[rowIndex][column] = newValue === '' ? null : newValue;
                    }
                    
                    const displayValue = newValue === '' ? 'NULL' : newValue;
                    const cellClass = newValue === '' ? 'text-gray-400 italic' : 'text-gray-900';
                    cell.innerHTML = `<div class="max-w-xs truncate" title="${escapeHtml(displayValue)}">${escapeHtml(displayValue)}</div>`;
                    cell.className = cell.className.replace('editing', '').trim() + ` ${cellClass}`;
                    
                    showNotification('Cell updated successfully!', 'success');
                } catch (error) {
                    console.error('Error updating cell:', error);
                    cell.innerHTML = `<div class="max-w-xs truncate" title="${escapeHtml(originalValue)}">${escapeHtml(originalValue)}</div>`;
                    cell.classList.remove('editing');
                    showNotification('Failed to update cell!', 'error');
                }
            };

            const cancelEdit = () => {
                cell.innerHTML = `<div class="max-w-xs truncate" title="${escapeHtml(originalValue)}">${escapeHtml(originalValue)}</div>`;
                cell.classList.remove('editing');
            };

            inputElement.addEventListener('blur', saveEdit);
            inputElement.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    saveEdit();
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    cancelEdit();
                }
            });
        }

        // Update cell value via API/db
        async function updateCellValue(rowId, column, value) {
            const updateData = { [column]: value === '' ? null : value };
            
            const response = await fetch(`/api/db/data/${tableName}/${rowId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updateData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Failed to update cell');
            }

            return response.json();
        }

        // Show add modal
        function showAddModal() {
            currentEditingRow = null;
            document.getElementById('modalTitle').textContent = 'Add New Row';
            populateModal();
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        // Edit row
        function editRow(rowId) {
            currentEditingRow = tableData.find(row => 
                primaryKeys.length > 0 ? row[primaryKeys[0]] == rowId : false
            );
            
            document.getElementById('modalTitle').textContent = 'Edit Row';
            populateModal(currentEditingRow);
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        // Populate modal form
        function populateModal(rowData = null) {
            const formFields = document.getElementById('formFields');
            formFields.innerHTML = columns.map(col => {
                const columnData = columnInfo.find(c => c.column_name === col);
                const isPrimaryKey = primaryKeys.includes(col);
                const value = rowData ? (rowData[col] === null ? '' : rowData[col]) : '';
                
                let inputElement;
                if (columnData && columnData.data_type.includes('boolean')) {
                    inputElement = `
                        <select name="${col}" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" ${isPrimaryKey && rowData ? 'disabled' : ''}>
                            <option value="">NULL</option>
                            <option value="true" ${value === true || value === 'true' ? 'selected' : ''}>true</option>
                            <option value="false" ${value === false || value === 'false' ? 'selected' : ''}>false</option>
                        </select>
                    `;
                } else if (columnData && (columnData.data_type.includes('text') || columnData.character_maximum_length > 100)) {
                    inputElement = `
                        <textarea name="${col}" rows="3" 
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 resize-vertical" 
                                  ${isPrimaryKey && rowData ? 'disabled' : ''}
                                  placeholder="${columnData.is_nullable === 'YES' ? 'Optional' : 'Required'}">${escapeHtml(String(value))}</textarea>
                    `;
                } else {
                    inputElement = `
                        <input type="text" name="${col}" value="${escapeHtml(String(value))}" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500" 
                               ${isPrimaryKey && rowData ? 'disabled' : ''}
                               placeholder="${columnData.is_nullable === 'YES' ? 'Optional' : 'Required'}">
                    `;
                }
                
                return `
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            ${col}
                            ${isPrimaryKey ? '<i class="fas fa-key text-yellow-500 ml-1" title="Primary Key"></i>' : ''}
                            ${columnData && columnData.is_nullable === 'NO' ? '<span class="text-red-500 ml-1">*</span>' : ''}
                        </label>
                        ${inputElement}
                        ${columnData ? `<p class="text-xs text-gray-500 mt-1">${columnData.data_type}</p>` : ''}
                    </div>
                `;
            }).join('');
        }

        // Save row
        async function saveRow() {
            const form = document.getElementById('editForm');
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value === '' ? null : value;
            }

            try {
                let response;
                
                if (currentEditingRow) {
                    // Update existing row
                    const rowId = primaryKeys.length > 0 ? currentEditingRow[primaryKeys[0]] : null;
                    response = await fetch(`/api/db/data/${tableName}/${rowId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                } else {
                    // Create new row
                    response = await fetch(`/api/db/data/${tableName}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                }

                if (response.ok) {
                    closeModal();
                    await loadTableData();
                    showNotification(currentEditingRow ? 'Row updated successfully!' : 'Row added successfully!', 'success');
                } else {
                    const error = await response.json();
                    showNotification(error.error || 'Failed to save row!', 'error');
                }
            } catch (error) {
                console.error('Error saving row:', error);
                showNotification('Network error occurred!', 'error');
            }
        }

        // Delete row
        function deleteRow(rowId) {
            deleteRowId = rowId;
            document.getElementById('deleteModal').classList.remove('hidden');
            document.getElementById('deleteModal').classList.add('flex');
        }

        // Confirm delete
        async function confirmDelete() {
            try {
                const response = await fetch(`/api/db/data/${tableName}/${deleteRowId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    closeDeleteModal();
                    await loadTableData();
                    showNotification('Row deleted successfully!', 'success');
                } else {
                    const error = await response.json();
                    showNotification(error.error || 'Failed to delete row!', 'error');
                }
            } catch (error) {
                console.error('Error deleting row:', error);
                showNotification('Network error occurred!', 'error');
            }
        }

        // Close modals
        function closeModal() {
            document.getElementById('editModal').classList.add('hidden');
            document.getElementById('editModal').classList.remove('flex');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
            document.getElementById('deleteModal').classList.remove('flex');
            deleteRowId = null;
        }

        // Sort table
        function sortTable(column) {
            tableData.sort((a, b) => {
                const aVal = a[column];
                const bVal = b[column];
                
                if (aVal === null) return 1;
                if (bVal === null) return -1;
                
                if (typeof aVal === 'number' && typeof bVal === 'number') {
                    return aVal - bVal;
                }
                
                return String(aVal).localeCompare(String(bVal));
            });
            
            renderTable();
        }

        // Refresh data
        async function refreshData() {
            await loadTableData();
            showNotification('Data refreshed!', 'success');
        }

        // Export data
        function exportData() {
            if (tableData.length === 0) {
                showNotification('No data to export', 'warning');
                return;
            }

            let csv = columns.join(',') + '\n';
            tableData.forEach(row => {
                const values = columns.map(col => {
                    const value = row[col];
                    if (value === null || value === undefined) return '';
                    const stringValue = typeof value === 'object' ? JSON.stringify(value) : String(value);
                    return '"' + stringValue.replace(/"/g, '""') + '"';
                });
                csv += values.join(',') + '\n';
            });

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${tableName}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);

            showNotification('Data exported successfully!', 'success');
        }

        // Utility functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function updateLastUpdated() {
            document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
        }

        // UI Helper functions
        function showLoading() {
            document.getElementById('loadingContainer').classList.remove('hidden');
            document.getElementById('tableContainer').classList.add('hidden');
            document.getElementById('emptyState').classList.add('hidden');
        }

        function hideLoading() {
            document.getElementById('loadingContainer').classList.add('hidden');
        }

        function showError(message) {
            const errorContainer = document.getElementById('errorContainer');
            const errorMessage = document.getElementById('errorMessage');
            errorMessage.textContent = message;
            errorContainer.classList.remove('hidden');
        }

        function hideError() {
            document.getElementById('errorContainer').classList.add('hidden');
        }

        // Notification system
        function showNotification(message, type) {
            const container = document.getElementById('notificationContainer');
            const notification = document.createElement('div');
            
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                warning: 'bg-yellow-500',
                info: 'bg-blue-500'
            };
            
            notification.className = `${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg flex items-center space-x-3 animate-slide-in max-w-md`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
                <span>${message}</span>
            `;
            
            container.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                notification.style.opacity = '0';
                setTimeout(() => {
                    if (container.contains(notification)) {
                        container.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Close modals on background click
        document.getElementById('editModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });
    </script>
</body>
</html>